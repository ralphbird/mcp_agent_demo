services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: currency-postgres
    environment:
      - POSTGRES_DB=currency_db
      - POSTGRES_USER=currency_user
      - POSTGRES_PASSWORD=currency_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U currency_user -d currency_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - currency-network

  # FastAPI Currency Conversion API
  api:
    build:
      context: .
      target: api
    container_name: currency-api
    ports:
      - "8000:8000"
    volumes:
      # Persistent database storage
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://currency_user:currency_pass@postgres:5432/currency_db
      - JAEGER_ENDPOINT=http://jaeger:4317
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,version"
    labels:
      - "service=currency-api"
      - "version=0.1.0"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - currency-network

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      target: dashboard
    container_name: currency-dashboard
    ports:
      - "8501:8501"
    volumes:
      # Persistent database storage
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://currency_user:currency_pass@postgres:5432/currency_db
      - API_BASE_URL=http://api:8000
      - LOAD_TESTER_URL=http://load-tester:8001
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,version"
    labels:
      - "service=dashboard"
      - "version=0.1.0"
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
      load-tester:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - currency-network

  # Load Tester Service
  load-tester:
    build:
      context: .
      target: load-tester
    container_name: currency-load-tester
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - LOAD_TESTER_TARGET_API_BASE_URL=http://api:8000
      - LOAD_TESTER_API_HOST=0.0.0.0
      - LOAD_TESTER_API_PORT=8001
      - JAEGER_ENDPOINT=http://jaeger:4317
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,version"
    labels:
      - "service=load-tester"
      - "version=0.1.0"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - currency-network

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: currency-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - currency-network

  # cAdvisor for container resource monitoring (ARM64 compatible)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor-arm64:v0.52.1
    container_name: currency-cadvisor
    platform: linux/aarch64
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - currency-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: currency-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki:/etc/loki:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - currency-network

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: currency-promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./docker/promtail:/etc/promtail:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - currency-network

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: currency-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks:
      - currency-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: currency-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP thrift
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "6831:6831/udp"  # UDP thrift compact
      - "6832:6832/udp"  # UDP thrift binary
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped
    networks:
      - currency-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  currency-network:
    driver: bridge
