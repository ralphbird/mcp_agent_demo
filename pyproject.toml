[tool.poetry]
name = "currency-conversion-api"
version = "0.1.0"
description = "Currency conversion API for debugging practice"
authors = ["rbird <rbird@pagerduty.com>"]
readme = "README.md"
packages = [{ include = "currency_app", from = "api" }]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.0"
uvicorn = { extras = ["standard"], version = "^0.32.0" }
sqlalchemy = "^2.0.36"
pydantic = "^2.10.0"
pydantic-settings = "^2.6.0"
streamlit = "^1.40.0"
requests = "^2.32.0"
plotly = "^5.24.0"
pandas = "^2.2.0"
uuid-utils = "^0.9.0"
prometheus-client = "^0.21.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.12.11"
pyright = "^1.1.404"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
httpx = "^0.28.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--verbose"]
asyncio_mode = "auto"

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "SIM",   # flake8-simplify
    "D",     # docstrings
    "NPY",   # numpy
    "RUF",   # ruff specific
    "RET",   # flake8-return
    "FBT",   # flake8-boolean-trap
    "ISC",   # flake8-implicit-string-concatenation
    "PIE",   # flake8-pie
    "ASYNC", # flake8-async

]
ignore = [
    "ISC001", # conflicts with ruff format
    "E501",   # line too long, handled by formatter
    "B008",   # function calls in argument defaults (FastAPI dependency injection)
    "B904",   # exception chaining (can be addressed later)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["B"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["currency_app"]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = ['S101'] # allow use of assert in tests

[tool.ruff.lint.pydocstyle]
convention = "google"        # see python standards for discussion on docstyle
ignore-var-parameters = true

[tool.pyright]
include = ["currency_app"]
exclude = ["**/node_modules", "**/__pycache__", ".venv"]
pythonVersion = "3.12"
typeCheckingMode = "basic"
